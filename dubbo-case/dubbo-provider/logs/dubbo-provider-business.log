2016/01/03 16:44:18,522 DEBUG [main] - Adding [systemProperties] PropertySource with lowest search precedence
2016/01/03 16:44:18,526 DEBUG [main] - Adding [systemEnvironment] PropertySource with lowest search precedence
2016/01/03 16:44:18,526 DEBUG [main] - Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
2016/01/03 16:44:18,530  INFO [main] - Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@1aad75: startup date [Sun Jan 03 16:44:18 CST 2016]; root of context hierarchy
2016/01/03 16:44:18,574 DEBUG [main] - Adding [systemProperties] PropertySource with lowest search precedence
2016/01/03 16:44:18,574 DEBUG [main] - Adding [systemEnvironment] PropertySource with lowest search precedence
2016/01/03 16:44:18,575 DEBUG [main] - Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
2016/01/03 16:44:18,586  INFO [main] - Loading XML bean definitions from class path resource [applicationContext.xml]
2016/01/03 16:44:18,677 DEBUG [main] - Using JAXP provider [org.apache.xerces.jaxp.DocumentBuilderFactoryImpl]
2016/01/03 16:44:18,810 DEBUG [main] - Loading schema mappings from [META-INF/spring.schemas]
2016/01/03 16:44:18,815 DEBUG [main] - Loaded schema mappings: {http://code.alibabatech.com/schema/dubbo/dubbo.xsd=META-INF/dubbo.xsd, http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd=org/springframework/web/servlet/config/spring-mvc-3.1.xsd, http://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.1.xsd=org/springframework/beans/factory/xml/spring-beans-3.1.xsd, http://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-3.0.xsd=org/springframework/aop/config/spring-aop-3.0.xsd, http://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop-2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-3.1.xsd=org/springframework/beans/factory/xml/spring-tool-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/util/spring-util-3.2.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd=org/springframework/web/servlet/config/spring-mvc-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd, http://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd, http://www.springframework.org/schema/aop/spring-aop-3.2.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd, http://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd, http://www.springframework.org/schema/util/spring-util-3.1.xsd=org/springframework/beans/factory/xml/spring-util-3.1.xsd, http://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd, http://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd, http://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-2.5.xsd=org/springframework/aop/config/spring-aop-2.5.xsd, http://www.springframework.org/schema/mvc/spring-mvc.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.2.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-3.1.xsd=org/springframework/aop/config/spring-aop-3.1.xsd, http://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.2.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd}
2016/01/03 16:44:18,816 DEBUG [main] - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.2.xsd
2016/01/03 16:44:18,868 DEBUG [main] - Found XML schema [http://www.springframework.org/schema/context/spring-context.xsd] in classpath: org/springframework/context/config/spring-context-3.2.xsd
2016/01/03 16:44:18,873 DEBUG [main] - Found XML schema [http://www.springframework.org/schema/tool/spring-tool-3.2.xsd] in classpath: org/springframework/beans/factory/xml/spring-tool-3.2.xsd
2016/01/03 16:44:18,881 DEBUG [main] - Loading bean definitions
2016/01/03 16:44:18,893 DEBUG [main] - Loaded NamespaceHandler mappings: {http://www.springframework.org/schema/p=org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler, http://www.springframework.org/schema/mvc=org.springframework.web.servlet.config.MvcNamespaceHandler, http://www.springframework.org/schema/util=org.springframework.beans.factory.xml.UtilNamespaceHandler, http://code.alibabatech.com/schema/dubbo=com.alibaba.dubbo.config.spring.schema.DubboNamespaceHandler, http://www.springframework.org/schema/jee=org.springframework.ejb.config.JeeNamespaceHandler, http://www.springframework.org/schema/aop=org.springframework.aop.config.AopNamespaceHandler, http://www.springframework.org/schema/cache=org.springframework.cache.config.CacheNamespaceHandler, http://www.springframework.org/schema/c=org.springframework.beans.factory.xml.SimpleConstructorNamespaceHandler, http://www.springframework.org/schema/task=org.springframework.scheduling.config.TaskNamespaceHandler, http://www.springframework.org/schema/lang=org.springframework.scripting.config.LangNamespaceHandler, http://www.springframework.org/schema/context=org.springframework.context.config.ContextNamespaceHandler}
2016/01/03 16:44:18,905 DEBUG [main] - Adding [systemProperties] PropertySource with lowest search precedence
2016/01/03 16:44:18,905 DEBUG [main] - Adding [systemEnvironment] PropertySource with lowest search precedence
2016/01/03 16:44:18,905 DEBUG [main] - Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
2016/01/03 16:44:18,918 DEBUG [main] - Looking for matching resources in directory tree [E:\github_Eclipse\dubbo\dubbo-case\dubbo-provider\dubbo-provider-business\target\classes\com\hyf\business]
2016/01/03 16:44:18,918 DEBUG [main] - Searching directory [E:\github_Eclipse\dubbo\dubbo-case\dubbo-provider\dubbo-provider-business\target\classes\com\hyf\business] for files matching pattern [E:/github_Eclipse/dubbo/dubbo-case/dubbo-provider/dubbo-provider-business/target/classes/com/hyf/business/**/impl/**/*.class]
2016/01/03 16:44:18,919 DEBUG [main] - Searching directory [E:\github_Eclipse\dubbo\dubbo-case\dubbo-provider\dubbo-provider-business\target\classes\com\hyf\business\openapi] for files matching pattern [E:/github_Eclipse/dubbo/dubbo-case/dubbo-provider/dubbo-provider-business/target/classes/com/hyf/business/**/impl/**/*.class]
2016/01/03 16:44:18,920 DEBUG [main] - Searching directory [E:\github_Eclipse\dubbo\dubbo-case\dubbo-provider\dubbo-provider-business\target\classes\com\hyf\business\openapi\dao] for files matching pattern [E:/github_Eclipse/dubbo/dubbo-case/dubbo-provider/dubbo-provider-business/target/classes/com/hyf/business/**/impl/**/*.class]
2016/01/03 16:44:18,920 DEBUG [main] - Searching directory [E:\github_Eclipse\dubbo\dubbo-case\dubbo-provider\dubbo-provider-business\target\classes\com\hyf\business\openapi\impl] for files matching pattern [E:/github_Eclipse/dubbo/dubbo-case/dubbo-provider/dubbo-provider-business/target/classes/com/hyf/business/**/impl/**/*.class]
2016/01/03 16:44:18,920 DEBUG [main] - Searching directory [E:\github_Eclipse\dubbo\dubbo-case\dubbo-provider\dubbo-provider-business\target\classes\com\hyf\business\openapiutil] for files matching pattern [E:/github_Eclipse/dubbo/dubbo-case/dubbo-provider/dubbo-provider-business/target/classes/com/hyf/business/**/impl/**/*.class]
2016/01/03 16:44:18,921 DEBUG [main] - Searching directory [E:\github_Eclipse\dubbo\dubbo-case\dubbo-provider\dubbo-provider-business\target\classes\com\hyf\business\openapiutil\dao] for files matching pattern [E:/github_Eclipse/dubbo/dubbo-case/dubbo-provider/dubbo-provider-business/target/classes/com/hyf/business/**/impl/**/*.class]
2016/01/03 16:44:18,921 DEBUG [main] - Searching directory [E:\github_Eclipse\dubbo\dubbo-case\dubbo-provider\dubbo-provider-business\target\classes\com\hyf\business\openapiutil\impl] for files matching pattern [E:/github_Eclipse/dubbo/dubbo-case/dubbo-provider/dubbo-provider-business/target/classes/com/hyf/business/**/impl/**/*.class]
2016/01/03 16:44:18,921 DEBUG [main] - Searching directory [E:\github_Eclipse\dubbo\dubbo-case\dubbo-provider\dubbo-provider-business\target\classes\com\hyf\business\test] for files matching pattern [E:/github_Eclipse/dubbo/dubbo-case/dubbo-provider/dubbo-provider-business/target/classes/com/hyf/business/**/impl/**/*.class]
2016/01/03 16:44:18,921 DEBUG [main] - Searching directory [E:\github_Eclipse\dubbo\dubbo-case\dubbo-provider\dubbo-provider-business\target\classes\com\hyf\business\test\dao] for files matching pattern [E:/github_Eclipse/dubbo/dubbo-case/dubbo-provider/dubbo-provider-business/target/classes/com/hyf/business/**/impl/**/*.class]
2016/01/03 16:44:18,922 DEBUG [main] - Searching directory [E:\github_Eclipse\dubbo\dubbo-case\dubbo-provider\dubbo-provider-business\target\classes\com\hyf\business\test\impl] for files matching pattern [E:/github_Eclipse/dubbo/dubbo-case/dubbo-provider/dubbo-provider-business/target/classes/com/hyf/business/**/impl/**/*.class]
2016/01/03 16:44:18,922 DEBUG [main] - Searching directory [E:\github_Eclipse\dubbo\dubbo-case\dubbo-provider\dubbo-provider-business\target\classes\com\hyf\business\utils] for files matching pattern [E:/github_Eclipse/dubbo/dubbo-case/dubbo-provider/dubbo-provider-business/target/classes/com/hyf/business/**/impl/**/*.class]
2016/01/03 16:44:18,922 DEBUG [main] - Resolved location pattern [classpath*:com/hyf/business/**/impl/**/*.class] to resources []
2016/01/03 16:44:18,935  INFO [main] - Loading XML bean definitions from class path resource [dubbo-provider.xml]
2016/01/03 16:44:18,936 DEBUG [main] - Using JAXP provider [org.apache.xerces.jaxp.DocumentBuilderFactoryImpl]
2016/01/03 16:44:18,938 DEBUG [main] - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.2.xsd
2016/01/03 16:44:18,951 DEBUG [main] - Found XML schema [http://code.alibabatech.com/schema/dubbo/dubbo.xsd] in classpath: META-INF/dubbo.xsd
2016/01/03 16:44:18,968 DEBUG [main] - Loading bean definitions
2016/01/03 16:44:18,976  INFO [main] - using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2016/01/03 16:44:19,001 DEBUG [main] - Imported 6 bean definitions from relative location [dubbo-provider.xml]
2016/01/03 16:44:19,002 DEBUG [main] - Loaded 11 bean definitions from location pattern [applicationContext.xml]
2016/01/03 16:44:19,002 DEBUG [main] - Bean factory for org.springframework.context.support.ClassPathXmlApplicationContext@1aad75: org.springframework.beans.factory.support.DefaultListableBeanFactory@62a0b27f: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,dataValidator,dubbo-provider-business,com.alibaba.dubbo.config.RegistryConfig,com.alibaba.dubbo.config.ProviderConfig,dubbo,com.hyf.openapi.interfaces.ApiInterface,providerService]; root of factory hierarchy
2016/01/03 16:44:19,014 DEBUG [main] - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
2016/01/03 16:44:19,014 DEBUG [main] - Creating instance of bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
2016/01/03 16:44:19,027 DEBUG [main] - Eagerly caching bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor' to allow for resolving potential circular references
2016/01/03 16:44:19,029 DEBUG [main] - Finished creating instance of bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
2016/01/03 16:44:19,060 DEBUG [main] - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
2016/01/03 16:44:19,061 DEBUG [main] - Creating instance of bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
2016/01/03 16:44:19,061 DEBUG [main] - Eagerly caching bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor' to allow for resolving potential circular references
2016/01/03 16:44:19,062 DEBUG [main] - Finished creating instance of bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
2016/01/03 16:44:19,062 DEBUG [main] - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
2016/01/03 16:44:19,062 DEBUG [main] - Creating instance of bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
2016/01/03 16:44:19,062 DEBUG [main] - Eagerly caching bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor' to allow for resolving potential circular references
2016/01/03 16:44:19,062 DEBUG [main] - Finished creating instance of bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
2016/01/03 16:44:19,063 DEBUG [main] - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
2016/01/03 16:44:19,063 DEBUG [main] - Creating instance of bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
2016/01/03 16:44:19,067 DEBUG [main] - Eagerly caching bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor' to allow for resolving potential circular references
2016/01/03 16:44:19,067 DEBUG [main] - Finished creating instance of bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
2016/01/03 16:44:19,068 DEBUG [main] - Creating shared instance of singleton bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
2016/01/03 16:44:19,068 DEBUG [main] - Creating instance of bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
2016/01/03 16:44:19,068 DEBUG [main] - Eagerly caching bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor' to allow for resolving potential circular references
2016/01/03 16:44:19,068 DEBUG [main] - Finished creating instance of bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
2016/01/03 16:44:19,071 DEBUG [main] - Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.DelegatingMessageSource@7563cf5d]
2016/01/03 16:44:19,072 DEBUG [main] - Unable to locate ApplicationEventMulticaster with name 'applicationEventMulticaster': using default [org.springframework.context.event.SimpleApplicationEventMulticaster@71a3f7bf]
2016/01/03 16:44:19,074  INFO [main] - Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@62a0b27f: defining beans [org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,dataValidator,dubbo-provider-business,com.alibaba.dubbo.config.RegistryConfig,com.alibaba.dubbo.config.ProviderConfig,dubbo,com.hyf.openapi.interfaces.ApiInterface,providerService,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor]; root of factory hierarchy
2016/01/03 16:44:19,074 DEBUG [main] - Returning cached instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
2016/01/03 16:44:19,074 DEBUG [main] - Returning cached instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
2016/01/03 16:44:19,074 DEBUG [main] - Returning cached instance of singleton bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
2016/01/03 16:44:19,074 DEBUG [main] - Returning cached instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
2016/01/03 16:44:19,075 DEBUG [main] - Creating shared instance of singleton bean 'dataValidator'
2016/01/03 16:44:19,075 DEBUG [main] - Creating instance of bean 'dataValidator'
2016/01/03 16:44:19,123 DEBUG [main] - Eagerly caching bean 'dataValidator' to allow for resolving potential circular references
2016/01/03 16:44:19,132 DEBUG [main] - Finished creating instance of bean 'dataValidator'
2016/01/03 16:44:19,132 DEBUG [main] - Creating shared instance of singleton bean 'dubbo-provider-business'
2016/01/03 16:44:19,132 DEBUG [main] - Creating instance of bean 'dubbo-provider-business'
2016/01/03 16:44:19,136 DEBUG [main] - Eagerly caching bean 'dubbo-provider-business' to allow for resolving potential circular references
2016/01/03 16:44:19,154 DEBUG [main] - Finished creating instance of bean 'dubbo-provider-business'
2016/01/03 16:44:19,154 DEBUG [main] - Creating shared instance of singleton bean 'com.alibaba.dubbo.config.RegistryConfig'
2016/01/03 16:44:19,154 DEBUG [main] - Creating instance of bean 'com.alibaba.dubbo.config.RegistryConfig'
2016/01/03 16:44:19,156 DEBUG [main] - Eagerly caching bean 'com.alibaba.dubbo.config.RegistryConfig' to allow for resolving potential circular references
2016/01/03 16:44:19,160 DEBUG [main] - Finished creating instance of bean 'com.alibaba.dubbo.config.RegistryConfig'
2016/01/03 16:44:19,160 DEBUG [main] - Creating shared instance of singleton bean 'com.alibaba.dubbo.config.ProviderConfig'
2016/01/03 16:44:19,160 DEBUG [main] - Creating instance of bean 'com.alibaba.dubbo.config.ProviderConfig'
2016/01/03 16:44:19,167 DEBUG [main] - Eagerly caching bean 'com.alibaba.dubbo.config.ProviderConfig' to allow for resolving potential circular references
2016/01/03 16:44:19,197 DEBUG [main] - Finished creating instance of bean 'com.alibaba.dubbo.config.ProviderConfig'
2016/01/03 16:44:19,197 DEBUG [main] - Creating shared instance of singleton bean 'dubbo'
2016/01/03 16:44:19,197 DEBUG [main] - Creating instance of bean 'dubbo'
2016/01/03 16:44:19,200 DEBUG [main] - Eagerly caching bean 'dubbo' to allow for resolving potential circular references
2016/01/03 16:44:19,204 DEBUG [main] - Finished creating instance of bean 'dubbo'
2016/01/03 16:44:19,205 DEBUG [main] - Creating shared instance of singleton bean 'com.hyf.openapi.interfaces.ApiInterface'
2016/01/03 16:44:19,205 DEBUG [main] - Creating instance of bean 'com.hyf.openapi.interfaces.ApiInterface'
2016/01/03 16:44:19,224 DEBUG [main] -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.8.4-SNAPSHOT, current host: 127.0.0.1
2016/01/03 16:44:19,320 DEBUG [main] -  [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.8.4-SNAPSHOT, current host: 127.0.0.1
2016/01/03 16:44:19,335 DEBUG [main] - Eagerly caching bean 'com.hyf.openapi.interfaces.ApiInterface' to allow for resolving potential circular references
2016/01/03 16:44:19,347 DEBUG [main] - Creating shared instance of singleton bean 'providerService'
2016/01/03 16:44:19,347 DEBUG [main] - Creating instance of bean 'providerService'
2016/01/03 16:44:19,349 DEBUG [main] - Registered injected element on class [com.hyf.openapi.impl.ApiInterfaceServiceImpl]: AutowiredFieldElement for com.hyf.openapi.utils.DataValidator com.hyf.openapi.impl.ApiInterfaceServiceImpl.dataValidator
2016/01/03 16:44:19,349 DEBUG [main] - Eagerly caching bean 'providerService' to allow for resolving potential circular references
2016/01/03 16:44:19,350 DEBUG [main] - Processing injected method of bean 'providerService': AutowiredFieldElement for com.hyf.openapi.utils.DataValidator com.hyf.openapi.impl.ApiInterfaceServiceImpl.dataValidator
2016/01/03 16:44:19,351 DEBUG [main] - Returning cached instance of singleton bean 'dataValidator'
2016/01/03 16:44:19,352 DEBUG [main] - Autowiring by type from bean name 'providerService' to bean named 'dataValidator'
2016/01/03 16:44:19,352 DEBUG [main] - Finished creating instance of bean 'providerService'
2016/01/03 16:44:19,353 DEBUG [main] - Invoking afterPropertiesSet() on bean with name 'com.hyf.openapi.interfaces.ApiInterface'
2016/01/03 16:44:19,353 DEBUG [main] - Returning cached instance of singleton bean 'com.alibaba.dubbo.config.ProviderConfig'
2016/01/03 16:44:19,353 DEBUG [main] - Returning cached instance of singleton bean 'dubbo'
2016/01/03 16:44:19,353 DEBUG [main] - Returning cached instance of singleton bean 'dubbo-provider-business'
2016/01/03 16:44:19,354 DEBUG [main] - Returning cached instance of singleton bean 'com.alibaba.dubbo.config.RegistryConfig'
2016/01/03 16:44:19,354 DEBUG [main] - Returning cached instance of singleton bean 'dubbo'
2016/01/03 16:44:19,354 DEBUG [main] - Finished creating instance of bean 'com.hyf.openapi.interfaces.ApiInterface'
2016/01/03 16:44:19,354 DEBUG [main] - Returning cached instance of singleton bean 'providerService'
2016/01/03 16:44:19,354 DEBUG [main] - Returning cached instance of singleton bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
2016/01/03 16:44:19,355 DEBUG [main] - Unable to locate LifecycleProcessor with name 'lifecycleProcessor': using default [org.springframework.context.support.DefaultLifecycleProcessor@2030fe04]
2016/01/03 16:44:19,355 DEBUG [main] - Returning cached instance of singleton bean 'lifecycleProcessor'
2016/01/03 16:44:19,358 DEBUG [main] - Returning cached instance of singleton bean 'com.hyf.openapi.interfaces.ApiInterface'
2016/01/03 16:44:19,358  INFO [main] -  [DUBBO] The service ready on spring started. service: com.hyf.openapi.interfaces.ApiInterface, dubbo version: 2.8.4-SNAPSHOT, current host: 127.0.0.1
2016/01/03 16:44:19,420 DEBUG [main] -  [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.8.4-SNAPSHOT, current host: 127.0.0.1
2016/01/03 16:44:19,432 DEBUG [main] -  [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.8.4-SNAPSHOT, current host: 127.0.0.1
2016/01/03 16:44:19,442 DEBUG [main] -  [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.8.4-SNAPSHOT, current host: 127.0.0.1
2016/01/03 16:44:19,451  INFO [main] -  [DUBBO] Export dubbo service com.hyf.openapi.interfaces.ApiInterface to local registry, dubbo version: 2.8.4-SNAPSHOT, current host: 127.0.0.1
2016/01/03 16:44:19,452  INFO [main] -  [DUBBO] Export dubbo service com.hyf.openapi.interfaces.ApiInterface to url dubbo://192.168.1.8:20080/com.hyf.openapi.interfaces.ApiInterface?anyhost=true&application=dubbo-provider-business&default.loadbalance=random&default.retries=0&default.threads=100&default.timeout=40000&dubbo=2.8.4-SNAPSHOT&generic=false&interface=com.hyf.openapi.interfaces.ApiInterface&methods=doPost&pid=18048&side=provider&timestamp=1451810659374, dubbo version: 2.8.4-SNAPSHOT, current host: 127.0.0.1
2016/01/03 16:44:19,461 DEBUG [main] -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adpative implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.8.4-SNAPSHOT, current host: 127.0.0.1
2016/01/03 16:44:19,477 DEBUG [main] -  [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adpative implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.8.4-SNAPSHOT, current host: 127.0.0.1
2016/01/03 16:44:19,489 DEBUG [main] -  [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adpative implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.8.4-SNAPSHOT, current host: 127.0.0.1
2016/01/03 16:44:19,527 DEBUG [main] -  [DUBBO] Using select timeout of 500, dubbo version: 2.8.4-SNAPSHOT, current host: 127.0.0.1
2016/01/03 16:44:19,527 DEBUG [main] -  [DUBBO] Epoll-bug workaround enabled = false, dubbo version: 2.8.4-SNAPSHOT, current host: 127.0.0.1
2016/01/03 16:44:19,580  INFO [main] -  [DUBBO] Start NettyServer bind /0.0.0.0:20080, export /192.168.1.8:20080, dubbo version: 2.8.4-SNAPSHOT, current host: 127.0.0.1
2016/01/03 16:44:19,583 DEBUG [main] - Searching for key 'spring.liveBeansView.mbeanDomain' in [systemProperties]
2016/01/03 16:44:19,583 DEBUG [main] - Searching for key 'spring.liveBeansView.mbeanDomain' in [systemEnvironment]
2016/01/03 16:44:19,583 DEBUG [main] - Could not find key 'spring.liveBeansView.mbeanDomain' in any property source. Returning [null]
2016/01/03 16:44:19,583 DEBUG [main] - Returning cached instance of singleton bean 'lifecycleProcessor'
2016/01/03 16:44:19,583 DEBUG [main] - Returning cached instance of singleton bean 'com.hyf.openapi.interfaces.ApiInterface'
2016/01/03 16:44:19,584  INFO [main] - ---------------start dubbo-provider-business sucessful---------------------
